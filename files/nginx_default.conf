{{ if ConfigOptionEquals "http_enabled" "1" }}
  server {
      listen      80 default_server;
      server_name {{ ConfigOption "hostname" }};

      {{ if ConfigOptionNotEquals "authentication_type" "authentication_type_anonymous" }}
      error_page 401 = @error401;
      location @error401 {
          return 302 http://$server_name/replicated-auth/sign-in;
      }

      location = /replicated-auth/sign-in {
          rewrite           .* /sign-in break;
          proxy_pass        http://{{ HostPrivateIpAddress "SSL/Authentication" "getelk/auth" }}:{{ ContainerExposedPort "SSL/Authentication" "getelk/auth" "8080" }};
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  Host $host;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      }

      location = /replicated-auth/authcheck {
          internal;

          rewrite           .* / break;
          proxy_pass        http://{{ HostPrivateIpAddress "SSL/Authentication" "getelk/auth" }}:{{ ContainerExposedPort "SSL/Authentication" "getelk/auth" "8080" }};
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  Host $host;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      }
      {{ end }}

      location / {
          {{ if ConfigOptionEquals "authentication_type" "authentication_type_password" }}
          auth_request /replicated-auth/authcheck;
          {{ end }}
          proxy_pass       http://{{ HostPrivateIpAddress "Logstash & Kibana" "getelk/kibana" }}:{{ ContainerExposedPort "Logstash & Kibana" "getelk/kibana" "5601" }};
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      }
  }
{{ end }}

{{ if ConfigOptionEquals "https_enabled" "1" }}
  server {
      listen              443 ssl;
      server_name         {{ ConfigOption "hostname" }};
      keepalive_timeout   70;

      ssl_certificate     /opt/certs/server.crt;
      ssl_certificate_key /opt/certs/server.key;
      ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers         HIGH:!aNULL:!MD5;
      ssl_session_cache   shared:SSL:10m;
      ssl_session_timeout 10m;

      {{ if ConfigOptionNotEquals "authentication_type" "authentication_type_anonymous" }}
      error_page 401 = @error401;
      location @error401 {
          return 302 https://$server_name/replicated-auth/sign-in;
      }

      location = /replicated-auth/sign-in {
          rewrite           .* /sign-in break;
          proxy_pass        http://{{ HostPrivateIpAddress "SSL/Authentication" "getelk/auth" }}:{{ ContainerExposedPort "SSL/Authentication" "getelk/auth" "8080" }};
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  Host $host;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      }

      location = /replicated-auth/authcheck {
          internal;

          rewrite           .* / break;
          proxy_pass        http://{{ HostPrivateIpAddress "SSL/Authentication" "getelk/auth" }}:{{ ContainerExposedPort "SSL/Authentication" "getelk/auth" "8080" }};
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  Host $host;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      }
      {{ end }}

      location / {
          {{ if ConfigOptionEquals "authentication_type" "authentication_type_password" }}
          auth_request /replicated-auth/authcheck;
          {{ end }}
          proxy_pass       http://{{ HostPrivateIpAddress "Logstash & Kibana" "getelk/kibana" }}:{{ ContainerExposedPort "Logstash & Kibana" "getelk/kibana" "5601" }};
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      }
  }
{{ end }}